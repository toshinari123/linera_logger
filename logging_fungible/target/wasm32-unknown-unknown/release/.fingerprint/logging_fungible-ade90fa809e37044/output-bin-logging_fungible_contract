{"message":"unused import: `from_utf8`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":607,"byte_end":616,"line_start":19,"line_end":19,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use std::str::{FromStr, from_utf8, Utf8Error};","highlight_start":25,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":605,"byte_end":616,"line_start":19,"line_end":19,"column_start":23,"column_end":34,"is_primary":true,"text":[{"text":"use std::str::{FromStr, from_utf8, Utf8Error};","highlight_start":23,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `from_utf8`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:19:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::str::{FromStr, from_utf8, Utf8Error};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":8140,"byte_end":8171,"line_start":232,"line_end":232,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":8140,"byte_end":8171,"line_start":232,"line_end":232,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[function]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":26562,"byte_end":26631,"line_start":461,"line_end":461,"column_start":1,"column_end":70,"is_primary":false,"text":[{"text":"pub fn function(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":8140,"byte_end":8171,"line_start":232,"line_end":232,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":8140,"byte_end":8171,"line_start":232,"line_end":232,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[function]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":26562,"byte_end":26631,"line_start":461,"line_end":461,"column_start":1,"column_end":70,"is_primary":false,"text":[{"text":"pub fn function(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:232:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[function(Self::logger_id()?)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `function` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":8788,"byte_end":8819,"line_start":253,"line_end":253,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":8788,"byte_end":8819,"line_start":253,"line_end":253,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[function]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":26562,"byte_end":26631,"line_start":461,"line_end":461,"column_start":1,"column_end":70,"is_primary":false,"text":[{"text":"pub fn function(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":8788,"byte_end":8819,"line_start":253,"line_end":253,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":8788,"byte_end":8819,"line_start":253,"line_end":253,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    #[function(Self::logger_id()?)]","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[function]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":26562,"byte_end":26631,"line_start":461,"line_end":461,"column_start":1,"column_end":70,"is_primary":false,"text":[{"text":"pub fn function(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:253:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[function(Self::logger_id()?)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `function` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `toml`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":974,"byte_end":1007,"line_start":35,"line_end":35,"column_start":5,"column_end":38,"is_primary":true,"text":[{"text":"    #[initialize(Self::logger_id()?)]","highlight_start":5,"highlight_end":38}],"label":"use of undeclared crate or module `toml`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":974,"byte_end":1007,"line_start":35,"line_end":35,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    #[initialize(Self::logger_id()?)]","highlight_start":5,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[initialize]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":402,"byte_end":473,"line_start":15,"line_end":15,"column_start":1,"column_end":72,"is_primary":false,"text":[{"text":"pub fn initialize(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `toml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[initialize(Self::logger_id()?)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `initialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":1674,"byte_end":1714,"line_start":54,"line_end":54,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    #[execute_operation(Self::logger_id()?)]","highlight_start":5,"highlight_end":45}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":1674,"byte_end":1714,"line_start":54,"line_end":54,"column_start":5,"column_end":45,"is_primary":false,"text":[{"text":"    #[execute_operation(Self::logger_id()?)]","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[execute_operation]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":5844,"byte_end":5922,"line_start":105,"line_end":105,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn execute_operation(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":1674,"byte_end":1714,"line_start":54,"line_end":54,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    #[execute_operation(Self::logger_id()?)]","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":1674,"byte_end":1714,"line_start":54,"line_end":54,"column_start":5,"column_end":45,"is_primary":false,"text":[{"text":"    #[execute_operation(Self::logger_id()?)]","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[execute_operation]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":5844,"byte_end":5922,"line_start":105,"line_end":105,"column_start":1,"column_end":79,"is_primary":false,"text":[{"text":"pub fn execute_operation(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:54:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[execute_operation(Self::logger_id()?)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `execute_operation` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2807,"byte_end":2845,"line_start":89,"line_end":89,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    #[execute_message(Self::logger_id()?)]","highlight_start":5,"highlight_end":43}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":2807,"byte_end":2845,"line_start":89,"line_end":89,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    #[execute_message(Self::logger_id()?)]","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[execute_message]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":10973,"byte_end":11049,"line_start":193,"line_end":193,"column_start":1,"column_end":77,"is_primary":false,"text":[{"text":"pub fn execute_message(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":2807,"byte_end":2845,"line_start":89,"line_end":89,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    #[execute_message(Self::logger_id()?)]","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":2807,"byte_end":2845,"line_start":89,"line_end":89,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    #[execute_message(Self::logger_id()?)]","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[execute_message]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":10973,"byte_end":11049,"line_start":193,"line_end":193,"column_start":1,"column_end":77,"is_primary":false,"text":[{"text":"pub fn execute_message(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:89:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[execute_message(Self::logger_id()?)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `execute_message` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":3699,"byte_end":3745,"line_start":116,"line_end":116,"column_start":5,"column_end":51,"is_primary":true,"text":[{"text":"    #[handle_application_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":51}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":3699,"byte_end":3745,"line_start":116,"line_end":116,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    #[handle_application_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[handle_application_call]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":16501,"byte_end":16585,"line_start":288,"line_end":288,"column_start":1,"column_end":85,"is_primary":false,"text":[{"text":"pub fn handle_application_call(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":3699,"byte_end":3745,"line_start":116,"line_end":116,"column_start":5,"column_end":51,"is_primary":true,"text":[{"text":"    #[handle_application_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":51}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":3699,"byte_end":3745,"line_start":116,"line_end":116,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    #[handle_application_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[handle_application_call]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":16501,"byte_end":16585,"line_start":288,"line_end":288,"column_start":1,"column_end":85,"is_primary":false,"text":[{"text":"pub fn handle_application_call(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:116:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[handle_application_call(Self::logger_id()?)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `handle_application_call` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":5459,"byte_end":5501,"line_start":168,"line_end":168,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"    #[handle_session_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":47}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":5459,"byte_end":5501,"line_start":168,"line_end":168,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    #[handle_session_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[handle_session_call]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":21448,"byte_end":21528,"line_start":371,"line_end":371,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn handle_session_call(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":5459,"byte_end":5501,"line_start":168,"line_end":168,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"    #[handle_session_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":47}],"label":null,"suggested_replacement":"to_string","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/contract.rs","byte_start":5459,"byte_end":5501,"line_start":168,"line_end":168,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    #[handle_session_call(Self::logger_id()?)]","highlight_start":5,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[handle_session_call]","def_site_span":{"file_name":"/mnt/d/PROJECTS/blockchain/linera_logger/logger_macro/src/lib.rs","byte_start":21448,"byte_end":21528,"line_start":371,"line_end":371,"column_start":1,"column_end":81,"is_primary":false,"text":[{"text":"pub fn handle_session_call(input: TokenStream, anno: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:168:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[handle_session_call(Self::logger_id()?)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try using a conversion method: `to_string`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `handle_session_call` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
